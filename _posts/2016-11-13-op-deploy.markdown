---
layout: post
title: 运维部署系统
date: 2016-11-13 13:00
tags:
  - tools
---

## 背景和目标
滴滴业务快速发展、在线服务规模迅速扩大，微服务架构逐渐落地、在线服务模块数迅速增加。滴滴的部署工具未能同步发展，因服务部署(变更)引发的故障占比极高(大约80%左右)。因此，运维部启动了**半自动化**部署系统的建设项目。

从产品层面来讲，这套部署系统的目标用户是业务RD，主要解决`业务RD通过UI来操作上线`的半自动化场景、不解决`持续发布`等全自动化场景。OP会放权给业务RD来自助执行上线操作。

从运维体系建设的角度来讲，这套系统承担了如下两个重要使命，

+ 固化变更流程：约束业务RD的上线流程，强制实现变更通告、分级发布、异常阻断等变更流程，弱化对人员素质的要求，降低稳定性风险
+ 统一运维规范：重塑在线业务的运维特征，包括服务定义、编译方式、启停方式、目录结构等，使之足够统一，奠基大一统的运维自动化体系

下面，我们主要从系统架构、运维规范两个角度来介绍这套系统，产品形态不做详细介绍。


## 系统架构
部署系统的技术架构相对简单，由5个部分组成，如下图所示。

![arch.png](https://raw.githubusercontent.com/niean/niean.github.io/master/images/20161113/arch.png)

#### 业务逻辑
1. 用户通过Web**发单**
2. 单子被**审核**通过后
3. Api会自动控制Build完成**打包**、并在Artifact上生成部署包下载源
4. 之后，用户通过Web依次操作多个集群下的不同物理机**部署**。部署
    - 用户在Web上的操作会发指令给Api
    - Api将收到的指令转化为单机任务，发送给对应机器上的Agent
    - Agent收到Api控制指令后，完成单机部署任务

#### 模块介绍
Web模块是FE部分，实现了和用户的交互，基于蚂蚁金服的antdesign开发。

Api模块是整个部署系统的控制中心，实现了诸如发单审核、变更通知、分级发布、异常阻断等核心业务逻辑。

Build模块负责生成部署包。Build并不会完成源代码的编译工作，而是直接使用了持续编译(对应EP.Build)产出的可执行文件包。Build会拆解可执行文件包，注入运维元数据、托管配置、镜像配置等，然后重新压缩成部署包。

Artifact是部署包的下载源，提供了简单的http下载能力。

Agent是部署在每台机器上的代理。它接受Api模块的控制，从Artifact拉取部署包，按照指定的逻辑停止老服务、更新代码、启动新服务。

#### 技术关键点
有很多关键点，这里简单的列举下。

- Api给Agent发指令采用两阶段协议：Api向指定机器Agent发送任务ID，Agent根据ID从固定地址的Api服务下载指令全文；


## 流程规范
流程和规范是两个事情：流程重在约束人的行为，规范重在约束平台或工具。部署系统实现了多种流程和规范，下面逐步介绍。

#### 流程
- 变更通告：平台自动发送变更通知给一组自定义的人，通知时机为每个集群分组开始变更；
- 变更步骤：平台强制实现了工单审核，提供了一键回滚的能力；
- 分级发布：平台实现了灰度、小流量、中流量、全流量的发布控制策略，通过拉长周期、分批上线来控制灾难的影响范围；
- 高峰期封线：平台在高峰期窗口内强制封线，各业务线或者服务按需自定义高峰期窗口；
- 服务检查：平台实现了checklist定义、部署暂停、double check、QA质检拦截、监控异常拦截等功能，在变更引发故障时做阻断；

上述五条，是滴滴内部固化的变更五条军规，具备相当的普适性。

#### 规范
- 服务定义：
- 模块定义：
- 编译规范：
- 启停规范：
- 源码包规范：
- 部署包规范：
- 服务自描述：


## 后续优化方向
- 物理机和容器的部署融合
- 变更通路统一化


