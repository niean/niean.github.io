---
layout: post
title: 管理平台低代码建设思考
date: 2021-11-14 11:00
tags:
  - theory
---

## 导读
本文的讨论对象，仅限于技术管理类平台，如运维、架构管理平台等；对应的，其结论也只在讨论对象的范围内做了验证。

本文借用了低代码这个流行词汇，但其含义跟业界定义相差甚大。


## 定义
什么是低代码？能够**降低「管理平台-应用功能」迭代成本**的技术方法，都可以算作低代码。

低代码的本质是**消除冗余、降低冗余的实现成本、转移冗余的边际成本**。如果现状不存在冗余，则无所谓低代码。


## 实现路径
低代码的实现路径，包括但不限于：

- 减少重复、增加复用
    - 复用已有能力，如运营分析使用大数据平台、外采成熟SaaS，避免重复造轮子
    - 聚化公共能力，如服务集中化的公共引擎、基础组件、技术中台，管理集中化的代码框架等；该方法时间越久，效果越佳
- 降低重复的实现成本
    - 拖拽式编程，典型如数据分析软件、仪器仿真软件等，互联网领域有腾讯蓝鲸、魔方建站等代表作品；建设可重复的能力，本身的投入值得关注
- 管控边际投入临界点
    - 合理转移成本，如运营、操作类实现转由SRE实现，可以实现DEV边际止损、SRE能力延伸；这类方式，不会带来某方面的总成本降低、但是会促进组织全局的成本降低


## CH案例
下面列举下，我司在低代码建设方面的实践结果。

- 作业平台：合理转移边际成本。作业平台提供了通用的命令通道能力、支持以脚本方式扩展操作插件；SRE根据需求、编写和维护操作脚本，然后借助作业平台分发、执行操作脚本
    - 点评：在这个过程中，SRE维护操作脚本、DEV不负责维护。这样做，大大降低了DEV开发平台的边际成本，也扩展了SRE的能力边界
- 权限系统：身份认证&鉴权中台。从运维管理视角出发，权限系统实现了对公司统一SSO的封装、对服务账号的支持，实现了RBAC模型的鉴权管理，同时对外提供了标准的RPC接口；运维平台其它的系统，以微服务调用的方式、复用权限系统之身份认证和鉴权功能
    - 点评：将身份认证、鉴权聚化建设成为一个中台能力，遵循了微服务化的理念，不但避免了重复造轮子，还能做到对身份、鉴权的中央管控
- 机器运营：复用大数据体系能力。运维的机器管理平台产生Mysql库表元数据，然后借助离线数仓的采集&清洗&聚合&展示能力、在大数据平台生成运营报表；可以借助ifream嵌套的方式、将大数据报表嵌入到运维平台，给用户以闭环体验
    - 点评：整个过程复用了大数据体系非常成熟的数据分析能力，大大加速了运维平台的建设进度；大数据报表平台，通常具备简易的拖拽生成能力，这也大大简化了报表的定制成本


## 写在最后
我司选择低代码路径，本质是因为DEV人员过于缺乏、不得不选择。低代码再向前一步，就会步入大运营、小技术的恶性循环，需谨慎关注。

