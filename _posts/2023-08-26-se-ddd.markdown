---
layout: post
title: 软件工程之领域驱动设计
date: 2023-08-26 21:00
tags:
  - se
---

## 要点简述
- DDD的几个关键词：业务场景，边界划分、通用语言，领域对象，领域建模
- DDD适用于业务系统。DDD虽然设计套路僵化、但能定义底线，颇有文正公结硬寨打呆仗之妙
- DDD核心思想是分治。将复杂的、大规模的业务领域建模，统一语言、逐层划分边界，然后分而治之
- DDD是动态演化过程。建模过程是不断猜想与反驳的过程，演化观点是建模过程的基本心智模式


## 基本概念
- DDD：Domain-Driven Design，领域驱动设计
    - 模型：DDD中的模型包括 领域、限界上下文、实体、值对象、聚合等
    - 关系：领域包含限界上下文，限界上下文包含子域，子域包含聚合，聚合包含实体和值对象
- 领域：Domain，业务范围和边界。领域分为核心、通用、支撑三类
    - 核心域：决定产品和公司核心竞争力的子域是核心域，直接对业务产生价值
    - 通用域：没有太多个性化诉求、被多个子域使用的通用功能子域是通用域，如权限、登陆，间接对业务产生价值
    - 支撑域：支撑其他领域业务、但不具有通用性，间接对业务产生价值
- 限界上下文：限界上下文即业务边界、类似微服务划分，它定义了该领域内部的通用语言、模型和规则
    - 目的：让不同领域/子领域，既能独立开发和演化、又能彼此交互和集成，类似微服务的高内聚低耦合理念
    - 形式：业务领域通常由多个子领域编排而成，限界上下文对其中的1+个子领域
    - 实现：高内聚低耦合，即一个限界上下文必须包括一个完整的业务流程(高内聚)、哪怕仅仅是子业务流程
- 实体：Entity，实体是对真实业务形态的抽象，实体有唯一标识、有生命周期、且具有延续性
    - 业务：实体能够反映业务的真实形态，是多个属性、操作或行为的载体
    - 代码：实体的代码有属性、行为(充血模型)，行为代表了大部分业务逻辑；只有属性、没有行为的成为贫血模型
    - 运行：实体有唯一不变的ID，属性可修改
- 值对象：值对象主要用于描述实体特征，是一些列属性的集合。值对象没有唯一ID、没有生命周期、不可修改。值对象和实体的区别举例如下图，
    - ![page.png](https://raw.githubusercontent.com/niean/niean.github.io/master/images/20230826/ddd-model-entryvo.jpg)
- 聚合：Aggregate，多个实体和值对象组成的东西叫聚合，聚合里面一定有一个实体是聚合根。
    - 聚合根：聚合根作用是保证内部的实体的一致性，外部操作只需要对阵聚合根
- 领域服务：DomainService
- 事件风暴：从琐碎到聚化的业务领域建模过程
    - 参与方：业务专家、产品经理、架构师、开发/测试
    - 关键点：业务的实体、命令、事件，实体执行命令后产生事件
    - 领域建模时，我们会根据场景分析过程中产生的领域对象，比如命令、事件等之间关系，找出产生命令的实体，分析实体之间的依赖关系组成聚合，为聚合划定限界上下文，建立领域模型以及模型之间的依赖。领域模型利用限界上下文向上可以指导微服务设计，通过聚合向下可以指导聚合根、实体和值对象的设计


## 数据对象
数据对象，大致分为如下几类：

- VO（View Object）视图对象
- DTO（Data Transfer Object）数据传输对象
- BO（Business Object）业务对象
- DO (Domain Object)：领域对象
- PO（Persistant Object）持久对象
- DAO（Data Access Object）数据访问对象

在DDD中，数据对象所处的分层及调用链路，大致如下。其中，BO对应领域向上游提供的API、DO对应领域向下游制定的SPI。

![page.png](https://raw.githubusercontent.com/niean/niean.github.io/master/images/20230826/ddd-model-data.jpg)


## 设计理念
- 依赖倒置：由领域层依赖基础层，倒置成基础层依赖领域层；这样，其它层都依赖领域层、领域层不依赖其它层，领域层最终只受限于业务逻辑
- 适配器：在六边形架构中，系统通过适配器的方式和外部交互，将应用服务&领域服务封装在系统内部、和外部解耦
- 充血模型：将业务逻辑封装在领域对象内，不仅仅是简单的数据容器、还包含了与业务相关的行为规则
    - 表现形式：代码高内聚，属性对外不可见、只能通过方法访问和变更等
    - 贫血模型：与充血模型相对应的是贫血模型，它将业务逻辑放在外部服务或管理类中、领域对象仅仅是简单的数据结构


## 建模过程
- 明确战略
- 事件风暴
- 分析领域故事
- 提取领域对象
- 代码模型映射
- 代码落地


## 代码规范




